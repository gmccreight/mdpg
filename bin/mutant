#!/usr/bin/env ruby

require 'find'
require 'fileutils'
require_relative "../lib/string_mutator"

class MyFile

  def ruby_files_and_lines
    ruby_files.map{|f| [f, File.read(f).lines.count]}
  end

  def ruby_files
    files_to_consider = []
    Find.find("lib") do |path|
      if FileTest.directory?(path)
        if File.basename(path)[0] == ?. and File.basename(path) != '.'
          Find.prune
        else
          next
        end
      else
        if File.basename(path) != ".DS_Store"
          files_to_consider << path
        end
      end
    end
    files_to_consider
  end

end

class Application

  attr_accessor :filename, :verbose_level

  def initialize
    self.verbose_level = 0
  end

  def run
    files_and_lines = MyFile.new.ruby_files_and_lines()
    files_and_lines.each do |file_and_line_count|
      filename = file_and_line_count[0]
      say "#{filename}" if self.verbose_level > 0
      file_original_data = File.read(file_and_line_count[0])
      num_lines = file_and_line_count[1]
      (0..(num_lines - 1)).each do |line_number|
        say "#{filename} #{line_number}" if self.verbose_level > 1
        line = file_original_data.lines[line_number]
        if line.chomp.size > 0
          StringMutator.new(line).get_all_mutations().each do |mutated_line|
            say "mutated line " + mutated_line if self.verbose_level > 1
            replace_line_from_filename_at_line_number filename, line_number, mutated_line
            if runs_spec_successfully?
              say "ERROR: #{filename} #{line_number + 1}: |||#{line.chomp}|||#{mutated_line.chomp}|||"
            end
            File.open(filename, 'w') { |file| file.write(file_original_data) }
          end
        end
      end
    end
  end

  def replace_line_from_filename_at_line_number filename, line_number, new_content
    new_file_data = ""
    file_data = File.read(filename)
    file_data.lines.each_with_index do |line, index|
      if index == line_number
        new_file_data << new_content
      else
        new_file_data << line
      end
    end

    File.open(filename, 'w') { |file| file.write(new_file_data) }
  end

  def run_cmd cmd
    say cmd if self.verbose_level > 2
    `#{cmd}`
  end

  def say message
    puts message
  end

  def runs_spec_successfully?
    cmd = "/bin/bash -l -c 'rake 2>/dev/null'"
    results = run_cmd(cmd)
    if results =~ / 0 failures, 0 errors, 0 skips/
      say "spec success" if self.verbose_level > 1
      true
    else
      say "spec fail" if self.verbose_level > 1
      false
    end
  end

end

app = Application.new()
if ARGV.size > 0
  app.verbose_level = ARGV[0].to_i
end
app.run()
